{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/AndroidPage.js","pages/IotPage.js","pages/ContactPage.js","App.js","serviceWorker.js","index.js"],"names":["Title","Typography","Text","HomePage","onClick","console","log","className","level","this","props","androidResearch","map","item","pos","key","iotResearch","React","Component","AboutPage","AndroidPage","IotPage","ContactPage","Header","Layout","Content","Footer","androidResearchData","Menu","SubMenu","iotResearchData","handleClick","App","basename","to","SecurityScanOutlined","style","fontSize","color","mode","Item","padding","marginTop","minHeight","exact","path","render","component","textAlign","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f384b70b.chunk.js","sourcesContent":["import React from \"react\";\nimport {Typography, Space} from 'antd';\n\nconst {Title, Text} = Typography;\n\nexport class HomePage extends React.Component {\n    render() {\n        return <div onClick={console.log('shabba')}>\n            <div className=\"section\">\n                <Title level={3} className='title'>Android Research</Title>\n                <Title level={4} className='desc'>Research investigating privacy and security issues in Android</Title>\n                <ul>\n                    {\n                        this.props.androidResearch.map((item, pos) => <li key={pos}><Text>{item}</Text></li>)\n                    }\n                </ul>\n            </div>\n            <div className=\"section\">\n                <Title level={3} className='title'>IoT Research</Title>\n                <Title level={4} className='desc'>Research investigating hardware and software security issues in Iot</Title>\n                <ul>\n                    {\n                        this.props.iotResearch.map((item, pos) => <li key={pos}><Text>{item}</Text></li>)\n                    }\n                </ul>\n            </div>\n        </div>;\n    }\n}","import React from \"react\";\n\nexport class AboutPage extends React.Component {\n    render() {\n        return <div><h2>About</h2></div>;\n    }\n}","import React from \"react\";\n\nexport class AndroidPage extends React.Component {\n    render() {\n        return <div><h2>Android</h2></div>;\n    }\n}","import React from \"react\";\n\nexport class IotPage extends React.Component {\n    render() {\n        return <div><h2>Iot</h2></div>;\n    }\n}","import React from \"react\";\n\nexport class ContactPage extends React.Component {\n    render() {\n        return <div><h2>Contact</h2></div>;\n    }\n}","import React from 'react';\nimport {HashRouter, Link, Route} from \"react-router-dom\";\n\nimport 'normalize.css/normalize.css'\nimport './styles/App.less';\nimport {Layout, Menu} from 'antd';\nimport {HomePage} from \"./pages/HomePage\";\nimport {AboutPage} from \"./pages/AboutPage\";\nimport {AndroidPage} from \"./pages/AndroidPage\";\nimport {IotPage} from \"./pages/IotPage\";\nimport {ContactPage} from \"./pages/ContactPage\";\nimport {SecurityScanOutlined} from \"@ant-design/icons\";\n\nconst {Header, Content, Footer} = Layout;\nconst {SubMenu} = Menu;\n\nconst androidResearchData = [\n    'Android Privacy',\n    'Software Analysis',\n    'Network Analysis'\n];\n\nconst iotResearchData = [\n    'Hardware Analysis',\n    'Network Analysis'\n];\n\n\nfunction handleClick() {\n\n}\n\nfunction App() {\n    return (\n        <HashRouter basename='/'>\n            <Layout className=\"app\">\n                <Header className=\"App-Header\">\n                    <Link to='/' className=\"logo\">\n                        <SecurityScanOutlined style={{fontSize: '30px', color: '#4276e3'}}/>\n                        <h2>SSLab</h2>\n                    </Link>\n                    <Menu onClick={handleClick} mode=\"horizontal\">\n                        <Menu.Item key=\"1\"><Link className=\"nav-text\" to=\"/about\">About</Link></Menu.Item>\n                        {/*<SubMenu className=\"nav-text\" title=\"Android\">*/}\n                        {/*    {androidResearchData.map((item, pos) => <Menu.Item className=\"nav-text\"*/}\n                        {/*                                                      key={pos}>{item}</Menu.Item>)}*/}\n\n                        {/*</SubMenu>*/}\n                        <Menu.Item key=\"2\"><Link className=\"nav-text\" to=\"/android\">Android</Link></Menu.Item>\n                        <Menu.Item key=\"3\"><Link className=\"nav-text\" to=\"/iot\">IoT</Link></Menu.Item>\n                        <Menu.Item key=\"4\"><Link className=\"nav-text\" to=\"/contact\">Contact</Link></Menu.Item>\n                    </Menu>\n                </Header>\n                <Content style={{padding: '0 50px', marginTop: 64}}>\n                    <div style={{padding: 24, minHeight: 380}}>\n                        <Route exact path=\"/\"\n                               render={(props) => <HomePage {...props}\n                                                            androidResearch={androidResearchData}\n                                                            iotResearch={iotResearchData}/>\n                               }\n                        />\n\n                        <Route path=\"/about\" component={AboutPage}/>\n                        <Route path=\"/android\"\n                               render={(props) => <AndroidPage {...props} androidResearch={androidResearchData}/>}/>\n                        <Route path=\"/iot\" render={(props) => <IotPage {...props} iotResearch={iotResearchData}/>}/>\n                        <Route path=\"/contact\" component={ContactPage}/>\n                    </div>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Secure Software Lab 2020</Footer>\n            </Layout>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}